//Code for camera-triggered acquisition of X-Y grids using ASI Array module.
//Running this breaks triggered Z-stack acquisition in Micro-manager.

import org.micromanager.navigation.PositionList;
import org.micromanager.navigation.MultiStagePosition;

//Function to send arbitrary commands to ASI Stage
String sendASICommand(String command){
	mmc.setSerialPortCommand("COM4", command, "\r");
	String asiReturn = mmc.getSerialPortAnswer("COM4", "\n");
	asiReturn = asiReturn.replaceAll("\r", "\r\n"); //reformat multiline responses for display
	return asiReturn;
}

acqName="test";
long width = mmc.getImageWidth();
long height = mmc.getImageHeight();
long depth = mmc.getBytesPerPixel();

positionList = gui.getPositionList();
double minX = positionList.getPosition(0).getX();
double maxX = positionList.getPosition(0).getX();
double minY = positionList.getPosition(0).getY();
double maxY = positionList.getPosition(0).getY();

for (int pos = 1; pos < positionList.getNumberOfPositions(); pos++){
	maxX = Math.max(maxX, positionList.getPosition(pos).getX());
	minX = Math.min(minX, positionList.getPosition(pos).getX());
	maxY = Math.max(maxY, positionList.getPosition(pos).getY());
	minY = Math.min(minY, positionList.getPosition(pos).getY());
}

//How many images per strip do we need?
double xDistance = Math.abs(maxX - minX);
xDistance = xDistance / 1000; //to convert to mm -  units are um
double cameraXFieldOfView = mmc.getPixelSizeUm() * width / 1000; //also mm
double cameraYFieldOfView = mmc.getPixelSizeUm() * height / 1000;
double fieldOverlap = 0.2; //fraction by which each field should overlap
double effectiveXFieldOfView = cameraXFieldOfView * (1 - fieldOverlap);
double effectiveYFieldOfView = cameraYFieldOfView * (1 - fieldOverlap);
int imagesPerStrip = Math.ceil(xDistance / effectiveXFieldOfView);
gui.message("Images per strip: " + imagesPerStrip);

gui.message("X step size:  " +effectiveXFieldOfView + " Y step size: " + effectiveYFieldOfView);

double yStepSize = effectiveYFieldOfView * 1000; //in microns
double xStepSize = effectiveXFieldOfView * 1000; //in microns
int nStripsToAcquire = Math.ceil((maxY-minY) / yStepSize);
gui.message("Will acquire " + nStripsToAcquire + " strips.");

int totalImages = nStripsToAcquire * imagesPerStrip;

//Send array layout to ASI controller
Long[] gridSize = new Long[] {imagesPerStrip, nStripsToAcquire};
String command = String.format("AR X=%1$d Y=%2$d", gridSize);
Double[] stepSize = new Double[] {effectiveXFieldOfView, effectiveYFieldOfView};
command = command + String.format(" Z=%1$-8.6f F=%2$-8.6f", stepSize);
ans = sendASICommand(command);
if (!ans.regionMatches(1,"A",0,1)){
	error("Couldn't set array parameters on stage");
}

//set up TTL triggers. X=7 - TTL triggers array move; Y=2 TTL out to trigger camera
ans = sendASICommand("TTL X=7 Y=2");
if (!ans.regionMatches(1,"A",0,1)){
	error("Couldn't set TTL parameters on stage");
}

//Go to array origin and home array
String stageName = mmc.getXYStageDevice();
mmc.setXYPosition(stageName, maxX, minY);
mmc.waitForSystem();
ans = sendASICommand("AHOME");
if (!ans.regionMatches(1,"A",0,1)){
	error("Couldn't set array home on stage");
}

//put camera in External trigger mode
mmc.setProperty("Zyla", "TriggerMode", "External");

//Start camera acquiring; nothing happens until trigger is received
mmc.startContinuousSequenceAcquisition(15);

//Initialize Acquisition
gui.closeAllAcquisitions();
gui.openAcquisition(acqName, "D:/AcquisitionData", totalImages, 1, 1, 1, true, true);
gui.initializeAcquisition(acqName, (int) width, (int) height, (int) depth);

//start array scanning
ans = sendASICommand("RM X=1");
if (!ans.regionMatches(1,"A",0,1)){
	error("Couldn't start stage scanning");
}

//grab images and insert into sequence
imageNum = 0;
while (imageNum <= totalImages) {
	if (mmc.getRemainingImageCount() > 0) {
		img = mmc.popNextImage();
	   gui.addImage(acqName, img, imageNum, 0, 0);
		imageNum++;
	} 
}
mmc.stopSequenceAcquisition();
gui.message("done");

//put camera back in Internal trigger mode
mmc.setProperty("Zyla", "TriggerMode", "Internal (Recommended for fast acquisitions)");